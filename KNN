K-nearest neighbors

nearest neighbors >> classification based on nearest position from datasets, it can be 2D, 3D or even 10D 
K-nearest neighbors >> K is number of dataset elements (data points) which is nearest from the prediction position
for K-NN is best uses odd number to prevent even split votes
KNN not best suited for large datasets

cross validation necessary?
to prevent overfitting, Learning the parameters of a prediction function and testing it on the same data is a methodological mistake: a model that would just repeat the labels of the samples that it has just seen would have a perfect score but would fail to predict anything useful on yet-unseen data.
However, by partitioning the available data into three sets, we drastically reduce the number of samples which can be used for learning the model, and the results can depend on a particular random choice for the pair of (train, validation) sets.
A solution to this problem is a procedure called cross-validation (CV for short). A test set should still be held out for final evaluation, but the validation set is no longer needed when doing CV.
A model is trained using:
  1. K - 1 of the folds as training data;
  2. the resulting model is validated on the remaining part of the data (i.e., it is used as a test set to compute a performance measure such as accuracy).
The performance measure reported by k-fold cross-validation is then the average of the values computed in the loop. This approach can be computationally expensive, but does not waste too much data (as is the case when fixing an arbitrary validation set), which is a major advantage in problems such as inverse inference where the number of samples is very small.
